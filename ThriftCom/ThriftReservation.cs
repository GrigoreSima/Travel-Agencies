/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace ThriftCom;

public partial class ThriftReservation : TBase
{
  private long _id;
  private string? _clientName;
  private string? _phoneNumber;
  private int _ticketsNo;
  private ThriftTrip? _trip;

  public long Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.@id = true;
      this._id = value;
    }
  }

  public string? ClientName
  {
    get
    {
      return _clientName;
    }
    set
    {
      __isset.clientName = true;
      this._clientName = value;
    }
  }

  public string? PhoneNumber
  {
    get
    {
      return _phoneNumber;
    }
    set
    {
      __isset.phoneNumber = true;
      this._phoneNumber = value;
    }
  }

  public int TicketsNo
  {
    get
    {
      return _ticketsNo;
    }
    set
    {
      __isset.ticketsNo = true;
      this._ticketsNo = value;
    }
  }

  public ThriftTrip? Trip
  {
    get
    {
      return _trip;
    }
    set
    {
      __isset.@trip = true;
      this._trip = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @id;
    public bool clientName;
    public bool phoneNumber;
    public bool ticketsNo;
    public bool @trip;
  }

  public ThriftReservation()
  {
  }

  public ThriftReservation DeepCopy()
  {
    var tmp10 = new ThriftReservation()
    {
    };
    if(__isset.@id)
    {
      tmp10.Id = this.Id;
    }
    tmp10.__isset.@id = this.__isset.@id;
    if((ClientName != null) && __isset.clientName)
    {
      tmp10.ClientName = this.ClientName!;
    }
    tmp10.__isset.clientName = this.__isset.clientName;
    if((PhoneNumber != null) && __isset.phoneNumber)
    {
      tmp10.PhoneNumber = this.PhoneNumber!;
    }
    tmp10.__isset.phoneNumber = this.__isset.phoneNumber;
    if(__isset.ticketsNo)
    {
      tmp10.TicketsNo = this.TicketsNo;
    }
    tmp10.__isset.ticketsNo = this.__isset.ticketsNo;
    if((Trip != null) && __isset.@trip)
    {
      tmp10.Trip = (ThriftTrip)this.Trip.DeepCopy()!;
    }
    tmp10.__isset.@trip = this.__isset.@trip;
    return tmp10;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              Id = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              ClientName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              PhoneNumber = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              TicketsNo = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Struct)
            {
              Trip = new ThriftTrip();
              await Trip.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp11 = new TStruct("ThriftReservation");
      await oprot.WriteStructBeginAsync(tmp11, cancellationToken);
      #pragma warning disable IDE0017  // simplified init
      var tmp12 = new TField();
      if(__isset.@id)
      {
        tmp12.Name = "id";
        tmp12.Type = TType.I64;
        tmp12.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
        await oprot.WriteI64Async(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ClientName != null) && __isset.clientName)
      {
        tmp12.Name = "clientName";
        tmp12.Type = TType.String;
        tmp12.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
        await oprot.WriteStringAsync(ClientName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((PhoneNumber != null) && __isset.phoneNumber)
      {
        tmp12.Name = "phoneNumber";
        tmp12.Type = TType.String;
        tmp12.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
        await oprot.WriteStringAsync(PhoneNumber, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.ticketsNo)
      {
        tmp12.Name = "ticketsNo";
        tmp12.Type = TType.I32;
        tmp12.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
        await oprot.WriteI32Async(TicketsNo, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Trip != null) && __isset.@trip)
      {
        tmp12.Name = "trip";
        tmp12.Type = TType.Struct;
        tmp12.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp12, cancellationToken);
        await Trip.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      #pragma warning restore IDE0017  // simplified init
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object? that)
  {
    if (that is not ThriftReservation other) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.@id == other.__isset.@id) && ((!__isset.@id) || (global::System.Object.Equals(Id, other.Id))))
      && ((__isset.clientName == other.__isset.clientName) && ((!__isset.clientName) || (global::System.Object.Equals(ClientName, other.ClientName))))
      && ((__isset.phoneNumber == other.__isset.phoneNumber) && ((!__isset.phoneNumber) || (global::System.Object.Equals(PhoneNumber, other.PhoneNumber))))
      && ((__isset.ticketsNo == other.__isset.ticketsNo) && ((!__isset.ticketsNo) || (global::System.Object.Equals(TicketsNo, other.TicketsNo))))
      && ((__isset.@trip == other.__isset.@trip) && ((!__isset.@trip) || (global::System.Object.Equals(Trip, other.Trip))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.@id)
      {
        hashcode = (hashcode * 397) + Id.GetHashCode();
      }
      if((ClientName != null) && __isset.clientName)
      {
        hashcode = (hashcode * 397) + ClientName.GetHashCode();
      }
      if((PhoneNumber != null) && __isset.phoneNumber)
      {
        hashcode = (hashcode * 397) + PhoneNumber.GetHashCode();
      }
      if(__isset.ticketsNo)
      {
        hashcode = (hashcode * 397) + TicketsNo.GetHashCode();
      }
      if((Trip != null) && __isset.@trip)
      {
        hashcode = (hashcode * 397) + Trip.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp13 = new StringBuilder("ThriftReservation(");
    int tmp14 = 0;
    if(__isset.@id)
    {
      if(0 < tmp14++) { tmp13.Append(", "); }
      tmp13.Append("Id: ");
      Id.ToString(tmp13);
    }
    if((ClientName != null) && __isset.clientName)
    {
      if(0 < tmp14++) { tmp13.Append(", "); }
      tmp13.Append("ClientName: ");
      ClientName.ToString(tmp13);
    }
    if((PhoneNumber != null) && __isset.phoneNumber)
    {
      if(0 < tmp14++) { tmp13.Append(", "); }
      tmp13.Append("PhoneNumber: ");
      PhoneNumber.ToString(tmp13);
    }
    if(__isset.ticketsNo)
    {
      if(0 < tmp14++) { tmp13.Append(", "); }
      tmp13.Append("TicketsNo: ");
      TicketsNo.ToString(tmp13);
    }
    if((Trip != null) && __isset.@trip)
    {
      if(0 < tmp14++) { tmp13.Append(", "); }
      tmp13.Append("Trip: ");
      Trip.ToString(tmp13);
    }
    tmp13.Append(')');
    return tmp13.ToString();
  }
}

