/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace ThriftCom;
public partial class ThriftUser : TBase
{
  private long _id;
  private string? _username;
  private string? _password;

  public long Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.@id = true;
      this._id = value;
    }
  }

  public string? Username
  {
    get
    {
      return _username;
    }
    set
    {
      __isset.@username = true;
      this._username = value;
    }
  }

  public string? Password
  {
    get
    {
      return _password;
    }
    set
    {
      __isset.@password = true;
      this._password = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool @id;
    public bool @username;
    public bool @password;
  }

  public ThriftUser()
  {
  }

  public ThriftUser DeepCopy()
  {
    var tmp0 = new ThriftUser()
    {
    };
    if(__isset.@id)
    {
      tmp0.Id = this.Id;
    }
    tmp0.__isset.@id = this.__isset.@id;
    if((Username != null) && __isset.@username)
    {
      tmp0.Username = this.Username!;
    }
    tmp0.__isset.@username = this.__isset.@username;
    if((Password != null) && __isset.@password)
    {
      tmp0.Password = this.Password!;
    }
    tmp0.__isset.@password = this.__isset.@password;
    return tmp0;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              Id = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Username = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Password = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp1 = new TStruct("ThriftUser");
      await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
      #pragma warning disable IDE0017  // simplified init
      var tmp2 = new TField();
      if(__isset.@id)
      {
        tmp2.Name = "id";
        tmp2.Type = TType.I64;
        tmp2.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
        await oprot.WriteI64Async(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Username != null) && __isset.@username)
      {
        tmp2.Name = "username";
        tmp2.Type = TType.String;
        tmp2.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
        await oprot.WriteStringAsync(Username, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Password != null) && __isset.@password)
      {
        tmp2.Name = "password";
        tmp2.Type = TType.String;
        tmp2.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
        await oprot.WriteStringAsync(Password, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      #pragma warning restore IDE0017  // simplified init
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object? that)
  {
    if (that is not ThriftUser other) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.@id == other.__isset.@id) && ((!__isset.@id) || (global::System.Object.Equals(Id, other.Id))))
      && ((__isset.@username == other.__isset.@username) && ((!__isset.@username) || (global::System.Object.Equals(Username, other.Username))))
      && ((__isset.@password == other.__isset.@password) && ((!__isset.@password) || (global::System.Object.Equals(Password, other.Password))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.@id)
      {
        hashcode = (hashcode * 397) + Id.GetHashCode();
      }
      if((Username != null) && __isset.@username)
      {
        hashcode = (hashcode * 397) + Username.GetHashCode();
      }
      if((Password != null) && __isset.@password)
      {
        hashcode = (hashcode * 397) + Password.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp3 = new StringBuilder("ThriftUser(");
    int tmp4 = 0;
    if(__isset.@id)
    {
      if(0 < tmp4++) { tmp3.Append(", "); }
      tmp3.Append("Id: ");
      Id.ToString(tmp3);
    }
    if((Username != null) && __isset.@username)
    {
      if(0 < tmp4++) { tmp3.Append(", "); }
      tmp3.Append("Username: ");
      Username.ToString(tmp3);
    }
    if((Password != null) && __isset.@password)
    {
      if(0 < tmp4++) { tmp3.Append(", "); }
      tmp3.Append("Password: ");
      Password.ToString(tmp3);
    }
    tmp3.Append(')');
    return tmp3.ToString();
  }
}

