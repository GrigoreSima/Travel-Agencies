/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace ThriftCom;

public partial class IThriftService
{
  public interface IAsync
  {
    global::System.Threading.Tasks.Task<bool> @login(ThriftUser? @user, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task @logout(ThriftUser? @user, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<List<ThriftTrip>> findAllTrips(CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<List<ThriftTrip>> findAllTripsForLandmarkInInterval(string? @landmark, int lowerLimit, int upperLimit, ThriftUser? @user, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task saveReservation(ThriftReservation? @reservation, CancellationToken cancellationToken = default);

    global::System.Threading.Tasks.Task<bool> slotsModified(CancellationToken cancellationToken = default);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task<bool> @login(ThriftUser? @user, CancellationToken cancellationToken = default)
    {
      await send_login(@user, cancellationToken);
      return await recv_login(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_login(ThriftUser? @user, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("login", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp15 = new InternalStructs.login_args() {
        User = @user,
      };
      
      await tmp15.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<bool> recv_login(CancellationToken cancellationToken = default)
    {
      
      var tmp16 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp16.Type == TMessageType.Exception)
      {
        var tmp17 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp17;
      }

      var tmp18 = new InternalStructs.login_result();
      await tmp18.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp18.__isset.success)
      {
        return tmp18.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task @logout(ThriftUser? @user, CancellationToken cancellationToken = default)
    {
      await send_logout(@user, cancellationToken);
      await recv_logout(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_logout(ThriftUser? @user, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("logout", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp19 = new InternalStructs.logout_args() {
        User = @user,
      };
      
      await tmp19.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_logout(CancellationToken cancellationToken = default)
    {
      
      var tmp20 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp20.Type == TMessageType.Exception)
      {
        var tmp21 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp21;
      }

      var tmp22 = new InternalStructs.logout_result();
      await tmp22.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<ThriftTrip>> findAllTrips(CancellationToken cancellationToken = default)
    {
      await send_findAllTrips(cancellationToken);
      return await recv_findAllTrips(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_findAllTrips(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("findAllTrips", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp23 = new InternalStructs.findAllTrips_args() {
      };
      
      await tmp23.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<ThriftTrip>> recv_findAllTrips(CancellationToken cancellationToken = default)
    {
      
      var tmp24 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp24.Type == TMessageType.Exception)
      {
        var tmp25 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp25;
      }

      var tmp26 = new InternalStructs.findAllTrips_result();
      await tmp26.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp26.__isset.success)
      {
        return tmp26.Success!;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAllTrips failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<ThriftTrip>> findAllTripsForLandmarkInInterval(string? @landmark, int lowerLimit, int upperLimit, ThriftUser? @user, CancellationToken cancellationToken = default)
    {
      await send_findAllTripsForLandmarkInInterval(@landmark, lowerLimit, upperLimit, @user, cancellationToken);
      return await recv_findAllTripsForLandmarkInInterval(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_findAllTripsForLandmarkInInterval(string? @landmark, int lowerLimit, int upperLimit, ThriftUser? @user, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("findAllTripsForLandmarkInInterval", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp27 = new InternalStructs.findAllTripsForLandmarkInInterval_args() {
        Landmark = @landmark,
        LowerLimit = lowerLimit,
        UpperLimit = upperLimit,
        User = @user,
      };
      
      await tmp27.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<ThriftTrip>> recv_findAllTripsForLandmarkInInterval(CancellationToken cancellationToken = default)
    {
      
      var tmp28 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp28.Type == TMessageType.Exception)
      {
        var tmp29 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp29;
      }

      var tmp30 = new InternalStructs.findAllTripsForLandmarkInInterval_result();
      await tmp30.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp30.__isset.success)
      {
        return tmp30.Success!;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAllTripsForLandmarkInInterval failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task saveReservation(ThriftReservation? @reservation, CancellationToken cancellationToken = default)
    {
      await send_saveReservation(@reservation, cancellationToken);
      await recv_saveReservation(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_saveReservation(ThriftReservation? @reservation, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("saveReservation", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp31 = new InternalStructs.saveReservation_args() {
        Reservation = @reservation,
      };
      
      await tmp31.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_saveReservation(CancellationToken cancellationToken = default)
    {
      
      var tmp32 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp32.Type == TMessageType.Exception)
      {
        var tmp33 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp33;
      }

      var tmp34 = new InternalStructs.saveReservation_result();
      await tmp34.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<bool> slotsModified(CancellationToken cancellationToken = default)
    {
      await send_slotsModified(cancellationToken);
      return await recv_slotsModified(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_slotsModified(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("slotsModified", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp35 = new InternalStructs.slotsModified_args() {
      };
      
      await tmp35.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<bool> recv_slotsModified(CancellationToken cancellationToken = default)
    {
      
      var tmp36 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp36.Type == TMessageType.Exception)
      {
        var tmp37 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp37;
      }

      var tmp38 = new InternalStructs.slotsModified_result();
      await tmp38.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp38.__isset.success)
      {
        return tmp38.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "slotsModified failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor>? _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["login"] = login_ProcessAsync;
      processMap_["logout"] = logout_ProcessAsync;
      processMap_["findAllTrips"] = findAllTrips_ProcessAsync;
      processMap_["findAllTripsForLandmarkInInterval"] = findAllTripsForLandmarkInInterval_ProcessAsync;
      processMap_["saveReservation"] = saveReservation_ProcessAsync;
      processMap_["slotsModified"] = slotsModified_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new() { };

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out var fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task login_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp39 = new InternalStructs.login_args();
      await tmp39.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp40 = new InternalStructs.login_result();
      try
      {
        tmp40.Success = await _iAsync.@login(tmp39.User, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("login", TMessageType.Reply, seqid), cancellationToken); 
        await tmp40.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp41)
      {
        var tmp42 = $"Error occurred in {GetType().FullName}: {tmp41.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp41, tmp42);
        else
          Console.Error.WriteLine(tmp42);
        var tmp43 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("login", TMessageType.Exception, seqid), cancellationToken);
        await tmp43.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task logout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp44 = new InternalStructs.logout_args();
      await tmp44.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp45 = new InternalStructs.logout_result();
      try
      {
        await _iAsync.@logout(tmp44.User, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("logout", TMessageType.Reply, seqid), cancellationToken); 
        await tmp45.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp46)
      {
        var tmp47 = $"Error occurred in {GetType().FullName}: {tmp46.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp46, tmp47);
        else
          Console.Error.WriteLine(tmp47);
        var tmp48 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("logout", TMessageType.Exception, seqid), cancellationToken);
        await tmp48.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task findAllTrips_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp49 = new InternalStructs.findAllTrips_args();
      await tmp49.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp50 = new InternalStructs.findAllTrips_result();
      try
      {
        tmp50.Success = await _iAsync.findAllTrips(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("findAllTrips", TMessageType.Reply, seqid), cancellationToken); 
        await tmp50.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp51)
      {
        var tmp52 = $"Error occurred in {GetType().FullName}: {tmp51.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp51, tmp52);
        else
          Console.Error.WriteLine(tmp52);
        var tmp53 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("findAllTrips", TMessageType.Exception, seqid), cancellationToken);
        await tmp53.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task findAllTripsForLandmarkInInterval_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp54 = new InternalStructs.findAllTripsForLandmarkInInterval_args();
      await tmp54.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp55 = new InternalStructs.findAllTripsForLandmarkInInterval_result();
      try
      {
        tmp55.Success = await _iAsync.findAllTripsForLandmarkInInterval(tmp54.Landmark, tmp54.LowerLimit, tmp54.UpperLimit, tmp54.User, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("findAllTripsForLandmarkInInterval", TMessageType.Reply, seqid), cancellationToken); 
        await tmp55.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp56)
      {
        var tmp57 = $"Error occurred in {GetType().FullName}: {tmp56.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp56, tmp57);
        else
          Console.Error.WriteLine(tmp57);
        var tmp58 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("findAllTripsForLandmarkInInterval", TMessageType.Exception, seqid), cancellationToken);
        await tmp58.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task saveReservation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp59 = new InternalStructs.saveReservation_args();
      await tmp59.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp60 = new InternalStructs.saveReservation_result();
      try
      {
        await _iAsync.saveReservation(tmp59.Reservation, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("saveReservation", TMessageType.Reply, seqid), cancellationToken); 
        await tmp60.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp61)
      {
        var tmp62 = $"Error occurred in {GetType().FullName}: {tmp61.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp61, tmp62);
        else
          Console.Error.WriteLine(tmp62);
        var tmp63 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("saveReservation", TMessageType.Exception, seqid), cancellationToken);
        await tmp63.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task slotsModified_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp64 = new InternalStructs.slotsModified_args();
      await tmp64.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp65 = new InternalStructs.slotsModified_result();
      try
      {
        tmp65.Success = await _iAsync.slotsModified(cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("slotsModified", TMessageType.Reply, seqid), cancellationToken); 
        await tmp65.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp66)
      {
        var tmp67 = $"Error occurred in {GetType().FullName}: {tmp66.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp66, tmp67);
        else
          Console.Error.WriteLine(tmp67);
        var tmp68 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("slotsModified", TMessageType.Exception, seqid), cancellationToken);
        await tmp68.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class login_args : TBase
    {
      private ThriftUser? _user;

      public ThriftUser? User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.@user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @user;
      }

      public login_args()
      {
      }

      public login_args DeepCopy()
      {
        var tmp69 = new login_args()
        {
        };
        if((User != null) && __isset.@user)
        {
          tmp69.User = (ThriftUser)this.User.DeepCopy()!;
        }
        tmp69.__isset.@user = this.__isset.@user;
        return tmp69;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  User = new ThriftUser();
                  await User.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp70 = new TStruct("login_args");
          await oprot.WriteStructBeginAsync(tmp70, cancellationToken);
          #pragma warning disable IDE0017  // simplified init
          var tmp71 = new TField();
          if((User != null) && __isset.@user)
          {
            tmp71.Name = "user";
            tmp71.Type = TType.Struct;
            tmp71.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
            await User.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          #pragma warning restore IDE0017  // simplified init
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not login_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@user == other.__isset.@user) && ((!__isset.@user) || (global::System.Object.Equals(User, other.User))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((User != null) && __isset.@user)
          {
            hashcode = (hashcode * 397) + User.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp72 = new StringBuilder("login_args(");
        int tmp73 = 0;
        if((User != null) && __isset.@user)
        {
          if(0 < tmp73++) { tmp72.Append(", "); }
          tmp72.Append("User: ");
          User.ToString(tmp72);
        }
        tmp72.Append(')');
        return tmp72.ToString();
      }
    }


    public partial class login_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public login_result()
      {
      }

      public login_result DeepCopy()
      {
        var tmp74 = new login_result()
        {
        };
        if(__isset.@success)
        {
          tmp74.Success = this.Success;
        }
        tmp74.__isset.@success = this.__isset.@success;
        return tmp74;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp75 = new TStruct("login_result");
          await oprot.WriteStructBeginAsync(tmp75, cancellationToken);
          #pragma warning disable IDE0017  // simplified init
          var tmp76 = new TField();

          if(this.__isset.@success)
          {
            tmp76.Name = "Success";
            tmp76.Type = TType.Bool;
            tmp76.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp76, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          #pragma warning restore IDE0017  // simplified init
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not login_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp77 = new StringBuilder("login_result(");
        int tmp78 = 0;
        if(__isset.@success)
        {
          if(0 < tmp78++) { tmp77.Append(", "); }
          tmp77.Append("Success: ");
          Success.ToString(tmp77);
        }
        tmp77.Append(')');
        return tmp77.ToString();
      }
    }


    public partial class logout_args : TBase
    {
      private ThriftUser? _user;

      public ThriftUser? User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.@user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @user;
      }

      public logout_args()
      {
      }

      public logout_args DeepCopy()
      {
        var tmp79 = new logout_args()
        {
        };
        if((User != null) && __isset.@user)
        {
          tmp79.User = (ThriftUser)this.User.DeepCopy()!;
        }
        tmp79.__isset.@user = this.__isset.@user;
        return tmp79;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  User = new ThriftUser();
                  await User.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp80 = new TStruct("logout_args");
          await oprot.WriteStructBeginAsync(tmp80, cancellationToken);
          #pragma warning disable IDE0017  // simplified init
          var tmp81 = new TField();
          if((User != null) && __isset.@user)
          {
            tmp81.Name = "user";
            tmp81.Type = TType.Struct;
            tmp81.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp81, cancellationToken);
            await User.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          #pragma warning restore IDE0017  // simplified init
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not logout_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@user == other.__isset.@user) && ((!__isset.@user) || (global::System.Object.Equals(User, other.User))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((User != null) && __isset.@user)
          {
            hashcode = (hashcode * 397) + User.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp82 = new StringBuilder("logout_args(");
        int tmp83 = 0;
        if((User != null) && __isset.@user)
        {
          if(0 < tmp83++) { tmp82.Append(", "); }
          tmp82.Append("User: ");
          User.ToString(tmp82);
        }
        tmp82.Append(')');
        return tmp82.ToString();
      }
    }


    public partial class logout_result : TBase
    {

      public logout_result()
      {
      }

      public logout_result DeepCopy()
      {
        var tmp84 = new logout_result()
        {
        };
        return tmp84;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp85 = new TStruct("logout_result");
          await oprot.WriteStructBeginAsync(tmp85, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not logout_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp86 = new StringBuilder("logout_result(");
        tmp86.Append(')');
        return tmp86.ToString();
      }
    }


    public partial class findAllTrips_args : TBase
    {

      public findAllTrips_args()
      {
      }

      public findAllTrips_args DeepCopy()
      {
        var tmp88 = new findAllTrips_args()
        {
        };
        return tmp88;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp89 = new TStruct("findAllTrips_args");
          await oprot.WriteStructBeginAsync(tmp89, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not findAllTrips_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp90 = new StringBuilder("findAllTrips_args(");
        tmp90.Append(')');
        return tmp90.ToString();
      }
    }


    public partial class findAllTrips_result : TBase
    {
      private List<ThriftTrip>? _success;

      public List<ThriftTrip>? Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public findAllTrips_result()
      {
      }

      public findAllTrips_result DeepCopy()
      {
        var tmp92 = new findAllTrips_result()
        {
        };
        if((Success != null) && __isset.@success)
        {
          tmp92.Success = this.Success.DeepCopy()!;
        }
        tmp92.__isset.@success = this.__isset.@success;
        return tmp92;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list93 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<ThriftTrip>(_list93.Count);
                    for(int _i94 = 0; _i94 < _list93.Count; ++_i94)
                    {
                      ThriftTrip _elem95;
                      _elem95 = new ThriftTrip();
                      await _elem95.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem95);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp96 = new TStruct("findAllTrips_result");
          await oprot.WriteStructBeginAsync(tmp96, cancellationToken);
          #pragma warning disable IDE0017  // simplified init
          var tmp97 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp97.Name = "Success";
              tmp97.Type = TType.List;
              tmp97.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp97, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (ThriftTrip _iter98 in Success)
              {
                await _iter98.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          #pragma warning restore IDE0017  // simplified init
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not findAllTrips_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp99 = new StringBuilder("findAllTrips_result(");
        int tmp100 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp100++) { tmp99.Append(", "); }
          tmp99.Append("Success: ");
          Success.ToString(tmp99);
        }
        tmp99.Append(')');
        return tmp99.ToString();
      }
    }


    public partial class findAllTripsForLandmarkInInterval_args : TBase
    {
      private string? _landmark;
      private int _lowerLimit;
      private int _upperLimit;
      private ThriftUser? _user;

      public string? Landmark
      {
        get
        {
          return _landmark;
        }
        set
        {
          __isset.@landmark = true;
          this._landmark = value;
        }
      }

      public int LowerLimit
      {
        get
        {
          return _lowerLimit;
        }
        set
        {
          __isset.lowerLimit = true;
          this._lowerLimit = value;
        }
      }

      public int UpperLimit
      {
        get
        {
          return _upperLimit;
        }
        set
        {
          __isset.upperLimit = true;
          this._upperLimit = value;
        }
      }

      public ThriftUser? User
      {
        get
        {
          return _user;
        }
        set
        {
          __isset.@user = true;
          this._user = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @landmark;
        public bool lowerLimit;
        public bool upperLimit;
        public bool @user;
      }

      public findAllTripsForLandmarkInInterval_args()
      {
      }

      public findAllTripsForLandmarkInInterval_args DeepCopy()
      {
        var tmp101 = new findAllTripsForLandmarkInInterval_args()
        {
        };
        if((Landmark != null) && __isset.@landmark)
        {
          tmp101.Landmark = this.Landmark!;
        }
        tmp101.__isset.@landmark = this.__isset.@landmark;
        if(__isset.lowerLimit)
        {
          tmp101.LowerLimit = this.LowerLimit;
        }
        tmp101.__isset.lowerLimit = this.__isset.lowerLimit;
        if(__isset.upperLimit)
        {
          tmp101.UpperLimit = this.UpperLimit;
        }
        tmp101.__isset.upperLimit = this.__isset.upperLimit;
        if((User != null) && __isset.@user)
        {
          tmp101.User = (ThriftUser)this.User.DeepCopy()!;
        }
        tmp101.__isset.@user = this.__isset.@user;
        return tmp101;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Landmark = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  LowerLimit = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  UpperLimit = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.Struct)
                {
                  User = new ThriftUser();
                  await User.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp102 = new TStruct("findAllTripsForLandmarkInInterval_args");
          await oprot.WriteStructBeginAsync(tmp102, cancellationToken);
          #pragma warning disable IDE0017  // simplified init
          var tmp103 = new TField();
          if((Landmark != null) && __isset.@landmark)
          {
            tmp103.Name = "landmark";
            tmp103.Type = TType.String;
            tmp103.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp103, cancellationToken);
            await oprot.WriteStringAsync(Landmark, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.lowerLimit)
          {
            tmp103.Name = "lowerLimit";
            tmp103.Type = TType.I32;
            tmp103.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp103, cancellationToken);
            await oprot.WriteI32Async(LowerLimit, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.upperLimit)
          {
            tmp103.Name = "upperLimit";
            tmp103.Type = TType.I32;
            tmp103.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp103, cancellationToken);
            await oprot.WriteI32Async(UpperLimit, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((User != null) && __isset.@user)
          {
            tmp103.Name = "user";
            tmp103.Type = TType.Struct;
            tmp103.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp103, cancellationToken);
            await User.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          #pragma warning restore IDE0017  // simplified init
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not findAllTripsForLandmarkInInterval_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@landmark == other.__isset.@landmark) && ((!__isset.@landmark) || (global::System.Object.Equals(Landmark, other.Landmark))))
          && ((__isset.lowerLimit == other.__isset.lowerLimit) && ((!__isset.lowerLimit) || (global::System.Object.Equals(LowerLimit, other.LowerLimit))))
          && ((__isset.upperLimit == other.__isset.upperLimit) && ((!__isset.upperLimit) || (global::System.Object.Equals(UpperLimit, other.UpperLimit))))
          && ((__isset.@user == other.__isset.@user) && ((!__isset.@user) || (global::System.Object.Equals(User, other.User))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Landmark != null) && __isset.@landmark)
          {
            hashcode = (hashcode * 397) + Landmark.GetHashCode();
          }
          if(__isset.lowerLimit)
          {
            hashcode = (hashcode * 397) + LowerLimit.GetHashCode();
          }
          if(__isset.upperLimit)
          {
            hashcode = (hashcode * 397) + UpperLimit.GetHashCode();
          }
          if((User != null) && __isset.@user)
          {
            hashcode = (hashcode * 397) + User.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp104 = new StringBuilder("findAllTripsForLandmarkInInterval_args(");
        int tmp105 = 0;
        if((Landmark != null) && __isset.@landmark)
        {
          if(0 < tmp105++) { tmp104.Append(", "); }
          tmp104.Append("Landmark: ");
          Landmark.ToString(tmp104);
        }
        if(__isset.lowerLimit)
        {
          if(0 < tmp105++) { tmp104.Append(", "); }
          tmp104.Append("LowerLimit: ");
          LowerLimit.ToString(tmp104);
        }
        if(__isset.upperLimit)
        {
          if(0 < tmp105++) { tmp104.Append(", "); }
          tmp104.Append("UpperLimit: ");
          UpperLimit.ToString(tmp104);
        }
        if((User != null) && __isset.@user)
        {
          if(0 < tmp105++) { tmp104.Append(", "); }
          tmp104.Append("User: ");
          User.ToString(tmp104);
        }
        tmp104.Append(')');
        return tmp104.ToString();
      }
    }


    public partial class findAllTripsForLandmarkInInterval_result : TBase
    {
      private List<ThriftTrip>? _success;

      public List<ThriftTrip>? Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public findAllTripsForLandmarkInInterval_result()
      {
      }

      public findAllTripsForLandmarkInInterval_result DeepCopy()
      {
        var tmp106 = new findAllTripsForLandmarkInInterval_result()
        {
        };
        if((Success != null) && __isset.@success)
        {
          tmp106.Success = this.Success.DeepCopy()!;
        }
        tmp106.__isset.@success = this.__isset.@success;
        return tmp106;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list107 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<ThriftTrip>(_list107.Count);
                    for(int _i108 = 0; _i108 < _list107.Count; ++_i108)
                    {
                      ThriftTrip _elem109;
                      _elem109 = new ThriftTrip();
                      await _elem109.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem109);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp110 = new TStruct("findAllTripsForLandmarkInInterval_result");
          await oprot.WriteStructBeginAsync(tmp110, cancellationToken);
          #pragma warning disable IDE0017  // simplified init
          var tmp111 = new TField();

          if(this.__isset.@success)
          {
            if (Success != null)
            {
              tmp111.Name = "Success";
              tmp111.Type = TType.List;
              tmp111.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp111, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (ThriftTrip _iter112 in Success)
              {
                await _iter112.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          #pragma warning restore IDE0017  // simplified init
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not findAllTripsForLandmarkInInterval_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.@success)
          {
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp113 = new StringBuilder("findAllTripsForLandmarkInInterval_result(");
        int tmp114 = 0;
        if((Success != null) && __isset.@success)
        {
          if(0 < tmp114++) { tmp113.Append(", "); }
          tmp113.Append("Success: ");
          Success.ToString(tmp113);
        }
        tmp113.Append(')');
        return tmp113.ToString();
      }
    }


    public partial class saveReservation_args : TBase
    {
      private ThriftReservation? _reservation;

      public ThriftReservation? Reservation
      {
        get
        {
          return _reservation;
        }
        set
        {
          __isset.@reservation = true;
          this._reservation = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @reservation;
      }

      public saveReservation_args()
      {
      }

      public saveReservation_args DeepCopy()
      {
        var tmp115 = new saveReservation_args()
        {
        };
        if((Reservation != null) && __isset.@reservation)
        {
          tmp115.Reservation = (ThriftReservation)this.Reservation.DeepCopy()!;
        }
        tmp115.__isset.@reservation = this.__isset.@reservation;
        return tmp115;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Reservation = new ThriftReservation();
                  await Reservation.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp116 = new TStruct("saveReservation_args");
          await oprot.WriteStructBeginAsync(tmp116, cancellationToken);
          #pragma warning disable IDE0017  // simplified init
          var tmp117 = new TField();
          if((Reservation != null) && __isset.@reservation)
          {
            tmp117.Name = "reservation";
            tmp117.Type = TType.Struct;
            tmp117.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp117, cancellationToken);
            await Reservation.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          #pragma warning restore IDE0017  // simplified init
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not saveReservation_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@reservation == other.__isset.@reservation) && ((!__isset.@reservation) || (global::System.Object.Equals(Reservation, other.Reservation))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Reservation != null) && __isset.@reservation)
          {
            hashcode = (hashcode * 397) + Reservation.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp118 = new StringBuilder("saveReservation_args(");
        int tmp119 = 0;
        if((Reservation != null) && __isset.@reservation)
        {
          if(0 < tmp119++) { tmp118.Append(", "); }
          tmp118.Append("Reservation: ");
          Reservation.ToString(tmp118);
        }
        tmp118.Append(')');
        return tmp118.ToString();
      }
    }


    public partial class saveReservation_result : TBase
    {

      public saveReservation_result()
      {
      }

      public saveReservation_result DeepCopy()
      {
        var tmp120 = new saveReservation_result()
        {
        };
        return tmp120;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp121 = new TStruct("saveReservation_result");
          await oprot.WriteStructBeginAsync(tmp121, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not saveReservation_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp122 = new StringBuilder("saveReservation_result(");
        tmp122.Append(')');
        return tmp122.ToString();
      }
    }


    public partial class slotsModified_args : TBase
    {

      public slotsModified_args()
      {
      }

      public slotsModified_args DeepCopy()
      {
        var tmp124 = new slotsModified_args()
        {
        };
        return tmp124;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp125 = new TStruct("slotsModified_args");
          await oprot.WriteStructBeginAsync(tmp125, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not slotsModified_args other) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp126 = new StringBuilder("slotsModified_args(");
        tmp126.Append(')');
        return tmp126.ToString();
      }
    }


    public partial class slotsModified_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.@success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool @success;
      }

      public slotsModified_result()
      {
      }

      public slotsModified_result DeepCopy()
      {
        var tmp128 = new slotsModified_result()
        {
        };
        if(__isset.@success)
        {
          tmp128.Success = this.Success;
        }
        tmp128.__isset.@success = this.__isset.@success;
        return tmp128;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp129 = new TStruct("slotsModified_result");
          await oprot.WriteStructBeginAsync(tmp129, cancellationToken);
          #pragma warning disable IDE0017  // simplified init
          var tmp130 = new TField();

          if(this.__isset.@success)
          {
            tmp130.Name = "Success";
            tmp130.Type = TType.Bool;
            tmp130.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp130, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          #pragma warning restore IDE0017  // simplified init
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object? that)
      {
        if (that is not slotsModified_result other) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.@success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp131 = new StringBuilder("slotsModified_result(");
        int tmp132 = 0;
        if(__isset.@success)
        {
          if(0 < tmp132++) { tmp131.Append(", "); }
          tmp131.Append("Success: ");
          Success.ToString(tmp131);
        }
        tmp131.Append(')');
        return tmp131.ToString();
      }
    }

  }

}
